---
title: "Projekt_kod"
format: html
editor: visual
---

# Biblioteki

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(readxl)
library(lmtest)
library(tseries)
library(xtable)
install.packages("patchwork")
library(patchwork)
```

# Wczytywanie danych i czyszczenie

```{r}
dane <- read_xlsx("../Ekonometria_projekt/dane/Dane2.xlsx")
dane
```

## Czyszczenie danych

```{r}
dane <- dane %>% 
  rename(y = 3) %>% 
  rename_with(.cols = 4:ncol(.), .fn = ~ paste0("x", seq_along(.))) %>% 
  mutate(
    x4 = round(x4,2),
    x6 = round(x6,2),
    x7 = round(x7,2),
    x8 = round(x8,1)
  )
dane
```

# Regresja Krokowa

### Krok 1 (x4)

```{r}
model <- lm(y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9, data = dane)
summary(model) #%>% xtable()
```

### Krok 2 (x6)

```{r}
model <- lm(y ~ x1 + x2 + x3 + x5 + x6 + x7 + x8 + x9, data = dane)
summary(model) #%>% xtable()
```

### Krok 3 (x2)

```{r}
model <- lm(y ~ x1 + x2 + x3 + x5 + x7 + x8 + x9, data = dane)
summary(model) #%>% xtable()
```

### Krok 4 (x9)

```{r}
model <- lm(y ~ x1 + x3 + x5 + x7 + x8 + x9, data = dane)
summary(model) #%>% xtable()
```

### Krok 5 (x3)

```{r}
model <- lm(y ~ x1 + x3 + x5 + x7 + x8, data = dane)
summary(model) #%>% xtable()
```

### Krok 6 (x5)

```{r}
model <- lm(y ~ x1 + x5 + x7 + x8, data = dane)
summary(model) #%>% xtable()
```

### Krok 7 (istotne)

```{r}
model_koncowy <- lm(y ~ x1 + x7 + x8, data = dane)
summary(model_koncowy) #%>% xtable()
```

# Modele jednowymiarowe i trendy

### Modele dla zmiennej x1

```{r}
model_lin <- lm(x1 ~ Lata, data = dane)
model_parabola <- lm(x1 ~ Lata + I(Lata^2), data = dane)
model_hiperbola <- lm(x1 ~ I(1 / Lata), data = dane)
model_wykladniczy <- lm(log(x1) ~ Lata, data = dane)
model_potegowy <- lm(log(x1) ~ log(Lata), data = dane)

# R^2
r2_lin <- summary(model_lin)$r.squared
r2_parabola <- summary(model_parabola)$r.squared
r2_hiperbola <- summary(model_hiperbola)$r.squared
r2_wykladniczy <- summary(model_wykladniczy)$r.squared
r2_potegowy <- summary(model_potegowy)$r.squared

r2_vec <- c(Liniowy = r2_lin,
            Paraboliczny = r2_parabola,
            Hiperboliczny = r2_hiperbola,
            Wykładniczy = r2_wykladniczy,
            Potęgowy = r2_potegowy)

print(r2_vec)
```

### Predykcje dla x1

```{r}
dane_pred <- dane %>%
  mutate(
    pred_parabola = predict(model_parabola),
    pred_hiperbola = predict(model_hiperbola),
    pred_wykladniczy = exp(predict(model_wykladniczy)),
    pred_potegowy = exp(predict(model_potegowy))
  )
dane_pred
```

### Wykresy dla x1

```{r}
p1 <- ggplot(dane, aes(x = Lata, y = x1)) +
  geom_point() +
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "blue") +
  ggtitle(paste0("Liniowy, R² = ", round(r2_lin, 4))) +
  theme_minimal()

# 2. Paraboliczny
p2 <- ggplot(dane, aes(x = Lata, y = x1)) +
  geom_point() +
  geom_smooth(method = "lm", formula = y ~ x + I(x^2), se = FALSE, color = "red") +
  ggtitle(paste0("Paraboliczny, R² = ", round(r2_parabola, 4))) +
  theme_minimal()

# 3. Hiperbola
p3 <- ggplot(dane, aes(x = Lata, y = x1)) +
  geom_point() +
  geom_smooth(method = "lm", formula = y ~ I(1 / x), se = FALSE, color = "purple") +
  ggtitle(paste0("Hiperboliczny, R² = ", round(r2_hiperbola, 4))) +
  theme_minimal()

# 4. Wykładniczy
p4 <- ggplot(dane, aes(x = Lata, y = x1)) +
  geom_point() +
  geom_line(aes(y = exp(predict(model_wykladniczy))), color = "green") +
  ggtitle(paste0("Wykładniczy, R² = ", round(r2_wykladniczy, 4))) +
  theme_minimal()

# 5. Potęgowy
p5 <- ggplot(dane, aes(x = Lata, y = x1)) +
  geom_point() +
  geom_line(aes(y = exp(predict(model_potegowy))), color = "grey") +
  ggtitle(paste0("Potęgowy, R² = ", round(r2_potegowy, 4))) +
  theme_minimal()

```

### Wizualizacja

```{r}
(p1 | p2) /
(p3 | p4 | p5)
```

### Zapis grafiki dla x1

```{r}
ggsave("modele_siatka_x1.png", p2, width = 10, height = 8, dpi = 300)
```

### Najlepszy model dla x1

```{r}
summary(model_parabola) %>% 
  xtable()
```

### Predykcja x1 na rok 2024

```{r}
rok_2024 <- 2024
nowy_rok <- data.frame(Lata = rok_2024)
pred_2024 <- predict(model_parabola, newdata = nowy_rok)
pred_2024
```

### Modele dla zmiennej x7

```{r}
model_lin_x7 <- lm(x7 ~ Lata, data = dane)
model_parabola_x7 <- lm(x7 ~ Lata + I(Lata^2), data = dane)
model_hiperbola_x7 <- lm(x7 ~ I(1 / Lata), data = dane)
model_wykladniczy_x7 <- lm(log(x7) ~ Lata, data = dane)
model_potegowy_x7 <- lm(log(x7) ~ log(Lata), data = dane)

# R^2
r2_lin_x7 <- summary(model_lin_x7)$r.squared
r2_parabola_x7 <- summary(model_parabola_x7)$r.squared
r2_hiperbola_x7 <- summary(model_hiperbola_x7)$r.squared
r2_wykladniczy_x7 <- summary(model_wykladniczy_x7)$r.squared
r2_potegowy_x7 <- summary(model_potegowy_x7)$r.squared

r2_vec_x7 <- c(Liniowy_x7 = r2_lin_x7,
            Paraboliczny_x7 = r2_parabola_x7,
            Hiperboliczny_x7 = r2_hiperbola_x7,
            Wykładniczy_x7 = r2_wykladniczy_x7,
            Potęgowy_x7 = r2_potegowy_x7)

print(r2_vec_x7)
```

### Predykcje dla x7

```{r}
dane_pred_x7 <- dane %>%
  mutate(
    pred_parabola_x7 = predict(model_parabola_x7),
    pred_hiperbola_x7 = predict(model_hiperbola_x7),
    pred_wykladniczy_x7 = exp(predict(model_wykladniczy_x7)),
    pred_potegowy_x7 = exp(predict(model_potegowy_x7))
  )
dane_pred_x7
```

### Wykresy dla x7

```{r}
p1_x7 <- ggplot(dane, aes(x = Lata, y = x7)) +
  geom_point() +
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "blue") +
  ggtitle(paste0("Liniowy, R² = ", round(r2_lin_x7, 4))) +
  theme_minimal()

# 2. Paraboliczny
p2_x7 <- ggplot(dane, aes(x = Lata, y = x7)) +
  geom_point() +
  geom_smooth(method = "lm", formula = y ~ x + I(x^2), se = FALSE, color = "red") +
  ggtitle(paste0("Paraboliczny, R² = ", round(r2_parabola_x7, 4))) +
  theme_minimal()

# 3. Hiperbola
p3_x7 <- ggplot(dane, aes(x = Lata, y = x7)) +
  geom_point() +
  geom_smooth(method = "lm", formula = y ~ I(1 / x), se = FALSE, color = "purple") +
  ggtitle(paste0("Hiperboliczny, R² = ", round(r2_hiperbola_x7, 4))) +
  theme_minimal()

# 4. Wykładniczy
p4_x7 <- ggplot(dane, aes(x = Lata, y = x7)) +
  geom_point() +
  geom_line(aes(y = exp(predict(model_wykladniczy_x7))), color = "green") +
  ggtitle(paste0("Wykładniczy, R² = ", round(r2_wykladniczy_x7, 4))) +
  theme_minimal()

# 5. Potęgowy
p5_x7 <- ggplot(dane, aes(x = Lata, y = x7)) +
  geom_point() +
  geom_line(aes(y = exp(predict(model_potegowy_x7))), color = "grey") +
  ggtitle(paste0("Potęgowy, R² = ", round(r2_potegowy_x7, 4))) +
  theme_minimal()

```

### Wizualizacja x7

```{r}
(p1_x7 | p2_x7) /
(p3_x7 | p4_x7 | p5_x7)
```

### Zapis grafiki dla x7

```{r}
ggsave("modele_siatka_x7.png", p2_x7, width = 10, height = 8, dpi = 300)
```

### Najlepszy model dla x7

```{r}
summary(model_parabola_x7) %>% 
  xtable()
```

### Predykcja x7 na rok 2024

```{r}
rok_2024_x7 <- 2024
nowy_rok_x7 <- data.frame(Lata = rok_2024_x7)
pred_2024_x7 <- predict(model_parabola_x7, newdata = nowy_rok_x7)
pred_2024_x7
```

### Modele dla zmiennej x8

```{r}
# Modele regresji dla zmiennej x8
model_lin_x8 <- lm(x8 ~ Lata, data = dane)
model_parabola_x8 <- lm(x8 ~ Lata + I(Lata^2), data = dane)
model_hiperbola_x8 <- lm(x8 ~ I(1 / Lata), data = dane)
model_wykladniczy_x8 <- lm(log(x8) ~ Lata, data = dane)
model_potegowy_x8 <- lm(log(x8) ~ log(Lata), data = dane)

# R^2
r2_lin_x8 <- summary(model_lin_x8)$r.squared
r2_parabola_x8 <- summary(model_parabola_x8)$r.squared
r2_hiperbola_x8 <- summary(model_hiperbola_x8)$r.squared
r2_wykladniczy_x8 <- summary(model_wykladniczy_x8)$r.squared
r2_potegowy_x8 <- summary(model_potegowy_x8)$r.squared

# Wektor R^2
r2_vec_x8 <- c(
  Liniowy_x8 = r2_lin_x8,
  Paraboliczny_x8 = r2_parabola_x8,
  Hiperboliczny_x8 = r2_hiperbola_x8,
  Wykładniczy_x8 = r2_wykladniczy_x8,
  Potęgowy_x8 = r2_potegowy_x8
)

print(r2_vec_x8)
```

### Predykcje dla x8

```{r}
dane_pred_x8 <- dane %>%
  mutate(
    pred_parabola_x8 = predict(model_parabola_x8),
    pred_hiperbola_x8 = predict(model_hiperbola_x8),
    pred_wykladniczy_x8 = exp(predict(model_wykladniczy_x8)),
    pred_potegowy_x8 = exp(predict(model_potegowy_x8))
  )

dane_pred_x8
```

### Wykresy dla x8

```{r}
# 1. Liniowy
p1_x8 <- ggplot(dane, aes(x = Lata, y = x8)) +
  geom_point() +
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "blue") +
  ggtitle(paste0("Liniowy, R² = ", round(r2_lin_x8, 4))) +
  theme_minimal()

# 2. Paraboliczny
p2_x8 <- ggplot(dane, aes(x = Lata, y = x8)) +
  geom_point() +
  geom_smooth(method = "lm", formula = y ~ x + I(x^2), se = FALSE, color = "red") +
  ggtitle(paste0("Paraboliczny, R² = ", round(r2_parabola_x8, 4))) +
  theme_minimal()

# 3. Hiperbola
p3_x8 <- ggplot(dane, aes(x = Lata, y = x8)) +
  geom_point() +
  geom_smooth(method = "lm", formula = y ~ I(1 / x), se = FALSE, color = "purple") +
  ggtitle(paste0("Hiperboliczny, R² = ", round(r2_hiperbola_x8, 4))) +
  theme_minimal()

# 4. Wykładniczy
p4_x8 <- ggplot(dane, aes(x = Lata, y = x8)) +
  geom_point() +
  geom_line(aes(y = exp(predict(model_wykladniczy_x8))), color = "green") +
  ggtitle(paste0("Wykładniczy, R² = ", round(r2_wykladniczy_x8, 4))) +
  theme_minimal()

# 5. Potęgowy
p5_x8 <- ggplot(dane, aes(x = Lata, y = x8)) +
  geom_point() +
  geom_line(aes(y = exp(predict(model_potegowy_x8))), color = "grey") +
  ggtitle(paste0("Potęgowy, R² = ", round(r2_potegowy_x8, 4))) +
  theme_minimal()

```

### Wizualizacja x8

```{r}
(p1_x8 | p2_x8) /
(p3_x8 | p4_x8 | p5_x8)
```

### Zapis grafiki dla x8

```{r}
ggsave("modele_siatka_x8.png", p2_x8, width = 10, height = 8, dpi = 300)
```

### Najlepszy model dla x8

```{r}
summary(model_parabola_x8) %>% 
  xtable()
```

### Predykcja x8 na rok 2024

```{r}
rok_2024_x8 <- 2024
nowy_rok_x8 <- data.frame(Lata = rok_2024_x8)
pred_2024_x8 <- predict(model_parabola_x8, newdata = nowy_rok_x8)
pred_2024_x8
```

# Testy

### Liniowość – Test RESEST

```{r}
reset <- resettest(model_koncowy) 

reset_df <- data.frame(
  "Statystyka testowa" = reset$statistic,
  "Wartość p" = reset$p.value,
  "Stopnie swobody 1" = reset$parameter[1],
  "Stopnie swobody 2" = reset$parameter[2],
  check.names = FALSE
)
#xtable(reset_df, caption = "Wyniki testu RESET dla modelu końcowego", digits = 4)
reset
```

### Homoskedastyczność - Test Goldfelda-Quandta

```{r}
gq <- gqtest(model_koncowy)
gq_df <- data.frame(
  `statystyka` = gq$statistic,
  `df1` = gq$parameter[1],
  `df2` = gq$parameter[2],
  `p-wartość` = gq$p.value,
  check.names = FALSE
)


xtable(gq_df, caption = "Test Goldfelda–Quandta", digits = 4)
gq
```

### Autokorelacja składników losowych – Test Durbina-Watsona

```{r}
dw <- dwtest(model_koncowy)
dw
dw_df <- data.frame(
  "statystyka" = dw$statistic,
  "p-wartość" = dw$p.value,
  check.names = FALSE
)
xtable(dw_df, caption = "Test Durbina-Watsona", digits = 4)

```

### Rozkład normalny reszt – Test JBT

```{r}
reszty <- resid(model_koncowy)
jbt <- jarque.bera.test(reszty)

model_JBT_df <- data.frame(
  "statystyka" = jbt$statistic,
  "p-wartość" = jbt$p.value,
  check.names = FALSE
)
model_JBT_df
xtable(model_JBT_df, caption = "Test Jarque-Bera", digits = 4)
```

# Badanie dobroci modelu

### Dobroć dopasowania modelu do obserwacji

```{r}
r2 <- summary(model_koncowy)$r.squared
adj_r2 <- summary(model_koncowy)$adj.r.squared

r2_table <- data.frame(
  Wskaźnik = c("R-squared", "Adjusted R-squared"),
  Wartość = round(c(r2, adj_r2), 4)
) 

r2_table %>% 
  xtable()
```

```{r}
summary(model_koncowy) 
```

### Współczynnik zmienności losowej – siła wpływu czynnika losowego

```{r}
Se <- summary(model_koncowy)$sigma

# Średnia zmiennej objaśnianej
y_mean <- mean(dane$y)

# Współczynnik zmienności resztowej (w %)
Ve <- (Se / y_mean) 

# Wyświetlenie wyniku
Ve
```

### Istotność prametrów – pamiętać

```{r}
summary(model_koncowy) %>% 
  xtable()
```
