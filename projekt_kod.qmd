---
title: "Projekt_kod"
format: html
editor: visual
---

# Biblioteki

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(readxl)
library(lmtest)
library(tseries)
library(xtable)
```

# Wczytywanie danych i czyszczenie

```{r}
dane <- read_xlsx("../Ekonometria_projekt/dane/Dane2.xlsx")
dane
```

## Czyszczenie danych

```{r}
dane <- dane %>% 
  rename(y = 3) %>% 
  rename_with(.cols = 4:ncol(.), .fn = ~ paste0("x", seq_along(.))) %>% 
  mutate(
    x4 = round(x4,2),
    x6 = round(x6,2),
    x7 = round(x7,2),
    x8 = round(x8,1)
  )
dane
```

# Regresja Krokowa

### Krok 1 (x4)

```{r}
model <- lm(y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9, data = dane)
summary(model) #%>% xtable()
```

### Krok 2 (x6)

```{r}
model <- lm(y ~ x1 + x2 + x3 + x5 + x6 + x7 + x8 + x9, data = dane)
summary(model) #%>% xtable()
```

### Krok 3 (x2)

```{r}
model <- lm(y ~ x1 + x2 + x3 + x5 + x7 + x8 + x9, data = dane)
summary(model) #%>% xtable()
```

### Krok 4 (x9)

```{r}
model <- lm(y ~ x1 + x3 + x5 + x7 + x8 + x9, data = dane)
summary(model) #%>% xtable()
```

### Krok 5 (x3)

```{r}
model <- lm(y ~ x1 + x3 + x5 + x7 + x8, data = dane)
summary(model) #%>% xtable()
```

### Krok 6 (x5)

```{r}
model <- lm(y ~ x1 + x5 + x7 + x8, data = dane)
summary(model) #%>% xtable()
```

### Krok 7 (istotne)

```{r}
model_koncowy <- lm(y ~ x1 + x7 + x8, data = dane)
summary(model_koncowy) #%>% xtable()
```

# Modele jednowymiarowe i trendy

### Dla x1 trendy

```{r}
wykres1 <- ggplot(dane, aes(y = x1, x = Lata))+
  geom_point()+
  geom_smooth(method = "lm", se = F)+
  theme_minimal()
ggsave("wykres1.png", plot = wykres1, width = 8, height = 6, dpi = 300)
wykres1
```

### Dla x1 model

```{r}
model_x1 <- lm(Lata~x1, data = dane)
ggplot(dane, aes(x = Lata, y = x1))+
  geom_point()+
  geom_smooth(method = "lm", se = F)
summary(model_x1) %>% 
  xtable()
```

### Dla x5 model

```{r}
model_x2 <- lm(Lata~x5, data = dane)
summary(model_x2) %>% 
  xtable()
```

### Dla x2 wykres

```{r}
wykres2 <- ggplot(dane, aes(y = x5, x = Lata))+
  geom_point()+
  geom_smooth(method = "lm", se = F)+
  theme_minimal()
wykres2
#ggsave("wykres2.png", plot = wykres2, width = 8, height = 6, dpi = 300)
```

```{r}
options(scipen = 999)
dane$y * 1e9
summary(lm(y~x8, data = dane))
ggplot(dane, aes(y = y, x = x8))+
  geom_point()+
  geom_smooth(method = "lm", se = F)+  # normalny zapis
  scale_y_continuous(limits = range(dane$y))+
  theme_minimal()
```

### dla x7

#### dopasowanie liniowe (R\^2 = 0,621)

```{r}
model_x7 <- lm(x7~Lata, data = dane)
summary(model_x7) #%>% xtable()

wykres3 <- ggplot(dane, aes(x = x7, y = y))+
  geom_point()+
  geom_smooth(method = "lm", se = F)+
  theme_minimal()+
  theme(
    axis.title = element_text(size = 16),  # rozmiar tytułów osi
    axis.text = element_text(size = 14),    # rozmiar liczb/etykiet osi
     plot.background = element_rect(fill = "white", color = NA),
    panel.background = element_rect(fill = "white", color = NA)
  )
wykres3

#ggsave("wykres3.png", plot = wykres3, width = 8, height = 6, dpi = 300)
```

#### dopasowanie hiperboliczne

```{r}
model_hiper <- nls(y ~ a / x7 + b, data = dane,
                   start = list(a = 1, b = 1))  

# Wartości obserwowane i przewidywane
y_obs <- dane$Lata
y_pred <- predict(model_hiper)

# Obliczenie R^2
ss_res <- sum((y_obs - y_pred)^2)
ss_tot <- sum((y_obs - mean(y_obs))^2)
r_squared <- 1 - (ss_res / ss_tot)

# Wynik
r_squared
```

### dla x8

```{r}
model_x8 <- lm(Lata~x8, data = dane)
summary(model_x8) #%>% xtable()

wykres4 <- ggplot(dane, aes(x = Lata, y = x8))+
  geom_point()+
  geom_smooth(method = "lm", se = F)+
   labs(y = "Liczba patentów (w tysiącach)")+
  theme_minimal()+
  theme(
    axis.title = element_text(size = 16),  # rozmiar tytułów osi
    axis.text = element_text(size = 14),    # rozmiar liczb/etykiet osi
     plot.background = element_rect(fill = "white", color = NA),
    panel.background = element_rect(fill = "white", color = NA)
  )
wykres4

ggsave("wykres4.png", plot = wykres4, width = 8, height = 6, dpi = 300)
```

# Testy

### Liniowość – Test RESEST

```{r}
reset <- resettest(model_koncowy) 

reset_df <- data.frame(
  "Statystyka testowa" = reset$statistic,
  "Wartość p" = reset$p.value,
  "Stopnie swobody 1" = reset$parameter[1],
  "Stopnie swobody 2" = reset$parameter[2],
  check.names = FALSE
)
xtable(reset_df, caption = "Wyniki testu RESET dla modelu końcowego", digits = 4)
reset
```

### Homoskedastyczność - Test Goldfelda-Quandta

```{r}
gq <- gqtest(model_koncowy)
gq_df <- data.frame(
  `statystyka` = gq$statistic,
  `df1` = gq$parameter[1],
  `df2` = gq$parameter[2],
  `p-wartość` = gq$p.value,
  check.names = FALSE
)


xtable(gq_df, caption = "Test Goldfelda–Quandta", digits = 4)
gq
```

### Autokorelacja składników losowych – Test Durbina-Watsona

```{r}
dw <- dwtest(model_koncowy)
dw
dw_df <- data.frame(
  "statystyka" = dw$statistic,
  "p-wartość" = dw$p.value,
  check.names = FALSE
)
xtable(dw_df, caption = "Test Durbina-Watsona", digits = 4)

```

### Rozkład normalny reszt – Test JBT

```{r}
reszty <- resid(model_koncowy)
jbt <- jarque.bera.test(reszty)

model_JBT_df <- data.frame(
  "statystyka" = jbt$statistic,
  "p-wartość" = jbt$p.value,
  check.names = FALSE
)
model_JBT_df
xtable(model_JBT_df, caption = "Test Jarque-Bera", digits = 4)

```

# Badanie dobroci modelu

### Dobroć dopasowania modelu do obserwacji

### Współczynnik zmienności losowej – siła wpływu czynnika losowego

### Istotność prametrów – pamiętać
